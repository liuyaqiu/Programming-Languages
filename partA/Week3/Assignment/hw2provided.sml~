(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)

	      (* Problem 1 a solution *)
fun all_except_option (str, lst) =
  let fun except (str, []) = []
	| except (str, head::rest) = if same_string(str, head) then rest
				     else head::except(str, rest)
  in
      let val res = except(str, lst) in
	  if res = lst
	  then NONE
	  else SOME res
      end
  end

      (* Problem 2 solution *)
fun get_substitutions1 (substitutions: string list list, s: string) =
  case substitutions of
      [] => []
    | head::tail => let val cur = all_except_option(s, head) in
			case cur of
			    NONE => get_substitutions1(tail, s)
			  | SOME value => value @ get_substitutions1(tail, s)
		    end
			
			(* Problem 3 solution *)
fun get_substitutions2 (subs: string list list, s: string) =
  let fun tail_rec (cur, res) =
      case cur of
	  [] => res
	| head::tail => let val tmp = all_except_option(s, head) in
			    case tmp of
				NONE => tail_rec(tail, res)
			      | SOME value => tail_rec(tail, res @ value)
			end
  in
	  tail_rec(subs, [])
  end
      
      (* Problem 4 solution *)
fun similar_names (subs, name) =
  let fun replaceFirst (rep, {first=fir, middle=mid, last=las}) =
	{first=rep, middle=mid, last=las}
  in
    let fun getRes ([], name) = []
	| getRes (head::tail, name) = replaceFirst(head, name)::getRes(tail, name)
    in
	case name of
	    {first=fir, middle=mid, last=las} => getRes(fir::get_substitutions2(subs, fir), name)
    end
  end
      
(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)

(* Problem 5 solution *)
